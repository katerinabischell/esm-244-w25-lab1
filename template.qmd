---
title: "Lab 01 Workup"
format: 
  html:
    code-fold: true
    toc: true
execute:
  eval: false
---

## Load in Data

You may need to install these packages

```{r}
library(tidyverse)
library(sf)
library(here)
library(tmap)
```


What do we need to change to get the data to load in the following chunk?

```{r}
sfo_trees_df<-read_csv(here("data","sfo_trees", "sfo_trees.csv")) |> janitor::clean_names() #the :: is a lazy load if we want to about doing library(janitor)
```

## Part 1: Data exploration

Look at `sfo_trees_df` dataframe. How many observations are there? What does the data include? Use the console to explore the data.

What are some interesting questions you could ask about the data?

Write them below:
Using dim(sfo_trees_df), I see that there are 197618 rows which are the observations and 12 columns which are the categories of the observations. 
Q: What is the dbh column? What does it stand for?
Q:Is there a correlation between legal status and species? 
Q: How can we use the latitude and longitude data to pinpoint the general locations of the species and their legal status?
Q: What is the significance of site order?
Q: Are there more of some species than others?
Q: How many unique species are there?
Q: Which streets/zip codes have more tree density?
Q: How many observation of legal status are we seeing?

Q: How many counts of each observation by legal_status? Focus on the highest trees? unique(sfo_trees_df$legal_status) 
```{r}
sfo_trees_df |> 
  group_by(legal_status) |> 
  summarize(tree_count=n()) |> 
  slice_max(tree_count, n=5) 

```
```{r}
sfo_trees_df |> 
  group_by(legal_status) |> 
  summarize(tree_count = n()) |> 
  slice_max(tree_count, n = 5) |> 
  ggplot(aes(x = reorder(legal_status, -tree_count), y = tree_count)) +
  geom_bar(stat = "identity", fill = "#2ca25f") +
  labs(
    title = "Top 5 Legal Status Categories by Tree Count",
    x = "Legal Status",
    y = "Tree Count") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 25, hjust = 1, family = "Arial", size = 8, face = "bold"),
    plot.title = element_text(hjust = 0.5), 
    panel.grid = element_blank())
```


### Example 2

Describe what this piece of code does. Feel free to run it to help you understand

```{r}
permitted_mta_dpw<-sfo_trees_df |> 
  filter(legal_status == 'Permitted Site' & caretaker %in% c("MTA","DPW"))
```

 It filters rows where the legal_status column has the value 'Permitted Site'. 
 It further filters rows where the caretaker column value is either "MTA" or "DPW". The %in% operator checks if a value belongs to a given set.
 The & operator combines the two conditions, meaning both must be true for a row to be included in the output.
 The resulting filtered dataset is assigned to the variable permitted_mta_dpw.

What does the `%in%` do? Write an example to explain the `%in%` operator to your neighbor using the empty code chunk below

The %in% calls for only the "MTA" and "DPW" values to be shown in the new permitted_mta_dpw dataframe from the caretaker column.

```{r}
sfo_trees_df |> 
  filter(legal_status %in% c("Permitted Site", "Undocumented"))

ex<-seq(1:10)

ex %in% c(1,2,11)
```


### Example 3

Our boss tasked us with identifying oak and pine trees in SF based on legal status, location, and planting date. Wrangle the data to plot the locations (without sf borders for now) and then summarize the number of oak and pines by legal status in a separate df. Call the wrangled dataframe `oak_pine_df` and the summary `oak_pine_count`

Write pseudocode on how you would solve it

1. Filter the dataframe for rows where species contains "oak" or "pine".
2. Select the columns: legal status, latitude, longitude, planting date, and species.
3. Create a new dataframe with the filtered data.
4. Group the filtered data by legal status.
5. Count the number of rows for each legal status group.
6. Save the summarized data to a new dataframe.
7. Plot the locations of oak and pine trees using latitude and longitude.

Data wrangle done below:


```{r}
oak_pine_df <- sfo_trees_df |> 
  filter(str_detect(species, regex("oak|pine", ignore_case = TRUE))) |> 
  select(legal_status, latitude, longitude, plant_date, species)


oak_pine_count <- oak_pine_df |> 
  group_by(legal_status) |> 
  summarize(count = n(), .groups = "drop")
```


Summary stats

```{r}
oak_pine_count<-oak_pine_df |> 
  group_by(legal_status,type)
  summarize(count=n())
```



Plot the locations of the trees as a scatterplot

```{r}

```



### Example 4

Why have a list of native trees in the data folder.

```{r}
ca_native_df<-read_csv(here('data/sfo/ca_native_spp.csv'))

# Why can I use this format instead of the usual here("data","folder","file")?
```


## Part 2: Analysis and maps

We want to see if there was a difference in planting years between a native oak *Quercus agrifolia* and a native pine *Pinus radiata*. Wrangle the data and use an appropriate statistical test to see if there is a difference.



**New Function!**

How to extract the year from the plant data column when it looks like "2022-11-16"? The package `lubridate` and function `year()` pulls out year information from date formats.  See the example code below.

```{r}
lubridate::year("2022-11-16")
```

```{r}
oak_pine_year_df<-????
```


Use the graph below to support your results. What does each line of code do in the ggplot?

```{r}
ggplot(oak_pine_year_df)+
  geom_histogram(aes(x=plant_year),bins = 10)+
  facet_wrap(~spp_sci,ncol=1)+
  theme_minimal()
```


Plot the selected species as points with a different colors for each year and a different shape for each species

### Spatial map:

Follow along as the instructor walks through each code chunk. In week 7 we'll cover spatial manipulation in R in far more detail. This is just to show a pretty map for all the work we did.

**Step 1**

Set the coordinate reference system

```{r}
oak_pine_sf<-oak_pine_year_df |> 
  drop_na(longtide,latitude) |> 
  st_as_sf(coords=c("longitude","latitude"))

st_crs(oak_pine_sf)<-4326

ggplot(data=oak_pine_sf)+
  geom_sf(aes(color=spp_sci))+
  theme_minimal()
```


**Step 2**

Read in the shape file for San Fransico.

```{r}
sfo_map <- read_sf(here("data", "sfo_map", "tl_2017_06075_roads.shp"))

#What do you think this does?
st_transform(sfo_map, 4326)
```

Plot it to see the outlines of streets

```{r}
ggplot(data = sfo_map) +
  geom_sf()
```


We have all the ingredients. How would you plot these two together to see the trees locations in the city?

```{r}

```


### Interactive Maps!

We can make maps interactive in R using the tmaps package (another reason why html docs are so cool).

There are other packages that do similar things. Consider for your shiny apps!

```{r}
tmap_model("view")

tm_shape(oak_pine_sf)+
  tm_dots(col='spp_sci')
```



WE ARE NOT DONE UNTIL WE SAVE, STAGE, COMMIT, AND PUSH!!!!!!
